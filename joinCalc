# for use in an ArcMap Toolbox

# alternative tool to using join with field calculator to update records
# updates a target feature class using a join with a source table
# requires two join fields
# and a target field and update field

# params #
# 1 Transfer from : source table
# 2 Using Join Field : source join field
# 3 Source Field: source field
# 4 Destination Feature: target feature layer to update
# 5 Destination Join Field: target feature layer join field
# 6 Destination Field: target field to update
# 7 Where Clause: how to filter source table features? (default: IS NOT NULL)
# 8 Remove Leading Zeros: remove leading zeros from target ID field?


import arcpy, traceback, os, sys
from arcpy import env
# env.overwriteOutput = True
# layoutFC=arcpy.GetParameterAsText(0)
# joinFieldS=arcpy.GetParameterAsText(1)
# sourceField=arcpy.GetParameterAsText(2)

# destFC=arcpy.GetParameterAsText(3)
# joinFieldD=arcpy.GetParameterAsText(4)
# destField=arcpy.GetParameterAsText(5)

# whereClause=arcpy.GetParameterAsText(6)
# result=arcpy.GetCount_management(destFC)
# nF=int(result.getOutput(0))
# arcpy.SetProgressor("step", "", 0, nF,1)

# try:
    # def showPyMessage():
        # arcpy.AddMessage(str(time.ctime()) + " - " + message)
    # destFields=arcpy.ListFields(destFC)
    # arcpy.TableSelect_analysis(layoutFC, "layoutFC2")
    # sTable=arcpy.da.TableToNumPyArray("layoutFC2",(joinFieldS,sourceField))
    # dictFeatures = {}
    # for j,s in sTable:dictFeatures[j]=s
    # with arcpy.da.UpdateCursor(destFC, (joinFieldD,destField)) as cursor:
        # for j,s in cursor:
            # arcpy.SetProgressorPosition()
            # try:
                # v=dictFeatures[j]
                # cursor.updateRow((j,v))
            # except: pass
    # arcpy.Delete_management("in_memory")
# except:
    # message = "\n*** PYTHON ERRORS *** "; showPyMessage()
    # message = "Python Traceback Info: " + traceback.format_tb(sys.exc_info()[2])[0]; showPyMessage()
    # message = "Python Error Info: " +  str(sys.exc_type)+ ": " + str(sys.exc_value) + "\n"; showPyMessage()   



env.overwriteOutput = True

#join table
joinFc =arcpy.GetParameterAsText(0)
#join key field
joinIdFld =arcpy.GetParameterAsText(1)
#join value field to be transferred
joinValFld=arcpy.GetParameterAsText(2)

#feature class to update
pointFc =arcpy.GetParameterAsText(3)
#update fc key field
IdFld =arcpy.GetParameterAsText(4)
#update field
updateFld =arcpy.GetParameterAsText(5)
whereClause=arcpy.GetParameterAsText(6)
checkedLeftstrip = arcpy.GetParameterAsText(1)
arcpy.TableSelect_analysis(joinFc, "in_memory\\tbl",where_clause='"'+joinValFld+'"'+whereClause )



if checkedLeftstrip:
	with arcpy.da.UpdateCursor(pointFc,[IdFld]) as cursor:
		for row in cursor:
			row=[i.lstrip('0') for i in row]
			cursor.updateRow(row)
			
#create dictionary
#Key: join field
#Value: field with value to be transferred
valueDi = dict ([(key, val) for key, val in
                 arcpy.da.SearchCursor
                 ("in_memory\\tbl", [joinIdFld, joinValFld])])

#update feature class
with arcpy.da.UpdateCursor (pointFc, [updateFld, IdFld]) as cursor:
    for update, key in cursor:
        #skip if key value is not in dictionary
        if not key in valueDi:
            continue
        #create row tuple
        row = (valueDi [key], key)

        #update row
        cursor.updateRow (row)
arcpy.Delete_management("in_memory")
del cursor

